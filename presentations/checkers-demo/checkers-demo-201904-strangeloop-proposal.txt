2 Strange Loop proposals for 2019

===========================================================================

Implement your own type system in 40 minutes

Don't let programming language designers have all the fun: you can design your own type system that is better than current ones.

Many developers view type theory as abstruse and confusing. It's not! This talk will show you the four simple components of a type system: the types, their subtyping relationships, how to give a type to each expression in your program, and what operations are legal/illegal. If you specify these four things, you have designed a type system.

We will do exactly that during the course of the presentation. Starting from nothing, we will create a full-fledged type-checker that detects real errors in real programs. For concreteness, we will implement our type-checker for the Java language, and it will handle all Java constructs, such as generics, subtyping, and lambdas. Our type system will be better than the built-in Java type system: it will detect mis-use of the Optional type that the Java compiler permits and that would go undetected until run time.

Although our example will use Java, the ideas translate to other languages. Even if you don't want to implement your own type system, you will come away with a better understanding of type systems and of compile-time verification in general.  If you are a Java programmer, you will be ready to use the dozens of available pluggable type-systems that others have already implemented and that are in use at companies such as Amazon, Google, and Uber to improve code quality.


What will the attendee learn?

The attendee will learn type system fundamentals, the type-checking mindset (which goes beyond using a language  with a type system), and how to do practical verification of real-world code.


History:

Seattle Java User's Group, February 2018
Oracle, May 2018
Code One, October 2018
Amazon Web Services, March 2019
The only one that might have a video available is the Code One version.


Dietl bio:

My research interests are in safe and productive software development. I combine theoretical results with practical tools so developers can create high-quality, trustworthy software and reduce the enormous impact of software defects. To achieve this goal, I combine my knowledge of programming languages and software engineering with the verification, security, and systems expertise of my collaborators.

===========================================================================

Title [55 characters max]:


[56 characters] Practical formal verification via pluggable type systems
[56 characters] Pluggable type systems: formal verification for everyone
[too cutesy] Preventing errors before they happen
[awkward] Pluggable type systems: practical formal verification
[awkward] Pluggable type systems: formal verification for all
[uses obscure vocabulary] Practical formal verification via pluggable types

Session type: Tutorial (2h)
Level: Intro

Abstract [max length 1500 characters]

Are you tired of null pointer exceptions, unintended side effects, SQL injections, race conditions, mistaken equality tests, incorrect internationalization, and other run-time errors? Are your users tired of them in your code? Testing can never find all bugs. This presentation shows you how to guarantee, at compile time, that these run-time exceptions will not occur.

A guarantee requires formal verification. We will use the only type of verification that has been widely adopted and successful: type systems. A pluggable, or optional, type checker runs in addition to the language's built-in type checker. The pluggable type system gives additional guarantees, or it identifies potentially-incorrect code. This verification occurs at compile time and without any run-time overhead.

New programming languages frequently introduce new type systems. Pluggable type systems let you use even more powerful type systems, and apply them to legacy code. A programmer can pick and choose the pluggable type system that addresses the greatest business need; for example, 60% of the top CWE/SANS Most Dangerous Software Errors can be detected and prevented with a type system. Pluggable types are the best path forward to formal verification, since they are modular, transparent, easy to use, and familiar to programmers. Formal verification is no longer an abstruse art. Companies such as Amazon, Google, and Uber use pluggable types in their build process.

You have nothing to lose but your bugs!


Keywords

type system, verification, security, exception


What will the attendee learn?

 * the basics of type theory
 * type-theoretic thinking, which enables you to express many different problems as a type system
 * how to interpret type system errors
 * how a type system promotes good design and clean code
 * how a type system can soundly and precisely give one variable different types on every line of code
 * how to use existing tools
 * how to create and implement your own type system


History:

We have presented variants of this tutorial at the Java One and Code One conferences every year for the past several years.  I don't think they were videotaped.


Dietl bio:

My research interests are in safe and productive software development. I combine theoretical results with practical tools so developers can create high-quality, trustworthy software and reduce the enormous impact of software defects. To achieve this goal, I combine my knowledge of programming languages and software engineering with the verification, security, and systems expertise of my collaborators.

