The presentation shows how to create a checker.
It creates a simple variant of the Optional Checker.

===========================================================================

Google Docs Slides are at:
https://docs.google.com/presentation/d/1xafCywcSumKuoVqvwENtZQhmjzmv_B07j9oEPFuNMDg

===========================================================================

PRESENTATION:

----------------

Preparation:

This section tells how to create a version of the Optional Checker with
some changes undone.  The API documentation is generated from Javadoc
before undoing the changes, so it includes the Optional Checker.

## Create the new version; make Javadoc that includes the new version
# Optionally, first blow away the old version:
# \rm -rf $t/checker-framework-optional-demo && \
cd $t && \
cp -R checker-framework-branch-master checker-framework-optional-demo && \
rm -f checker-framework && \
ln -s checker-framework-optional-demo checker-framework && \
(cd $cf && ./gradlew build javadoc) && \
(make -C $cf/docs/manual) && \
(cd && javadoc-index-to-alist > ~/.javadoc-index.el)

## Warm up the gradle daemon:
(let ((default-directory "/home/mernst/research/types/checker-framework-optional-demo"))
  (compile "./gradlew assemble"))

## Stub file with @Present annotations removed.
cp $ch/jdk/optional/src/java/util/Optional.java $ch/src/main/java/org/checkerframework/checker/optional/jdk.astub
sed -i 's/@Present //' $ch/src/main/java/org/checkerframework/checker/optional/jdk.astub
sed -i 's/@EnsuresQualifierIf/\/\/ @EnsuresQualifierIf/' $ch/src/main/java/org/checkerframework/checker/optional/jdk.astub

## Move orginal .java files aside (leave messages.properties file).
## Leave compiler interface, since test references it.
cd $ch/src/main/java/org/checkerframework/checker/optional/
for FILE in `find . -name '*.java'`; do mv $FILE $FILE-ORIG; done
(cd $cf && ./gradlew assemble tags)
;; Open presentation, then manual in two browser tabs:  one for creating a
;; checker, one for the Optional Checker manual chapter.
(progn
(browse-url "https://docs.google.com/presentation/d/1xafCywcSumKuoVqvwENtZQhmjzmv_B07j9oEPFuNMDg")
(sit-for 1)
(browse-url "/home/mernst/research/types/checker-framework-optional-demo/docs/manual/manual.html")
(sit-for 1)
(browse-url "file:///home/mernst/research/types/checker-framework-optional-demo/docs/manual/manual.html#optional-checker"))

----------------

Open some files in my editor:
(progn
;; Source code directory
(find-file (substitute-in-file-name "$t/checker-framework-optional-demo/checker/src/main/java/org/checkerframework/checker/optional/"))
;; Test cases
(find-file (substitute-in-file-name "$t/checker-framework-optional-demo/checker/tests/optional/")))

----------------

Present the slides.
Then, follow the "Tips for creating a checker" chapter of the manual.

----------------

Notes:
 * in general, show the test case failing first, then passing.
 * start compilation early because it sometimes takes a long time.

----------------

QUALIFIERS

create Present, MaybePresent [skip polymorphism]
by cut-and-paste-and edit from the manual.  Change:
 * package
 * Javadoc
 * @SubtypeOf
 * interface name

Save them in this directory:
$ch/src/main/java/org/checkerframework/checker/optional/qual/

Compile:
(cd $cf && ./gradlew assemble)
gradle -p $cf assemble

Test with Subtyping Checker:

# Show the file $ch/tests/optional/SubtypeCheck.java

cd $ch/tests/optional
$ch/bin/javac -processor org.checkerframework.common.subtyping.SubtypingChecker -Aquals=org.checkerframework.checker.optional.qual.Present,org.checkerframework.checker.optional.qual.MaybePresent SubtypeCheck.java

----------------

COMPILER INTERFACE

# Create
# $ch/src/main/java/org/checkerframework/checker/optional/OptionalChecker
# then re-compile:
gradle -p $cf assemble

# After that, run the same test:
cd $ch/tests/optional
$ch/bin/javac -processor optional SubtypeCheck.java
[javacheck -processor optional SubtypeCheck.java] [not working at the moment]

----------------

ANNOTATED LIBRARY

# First, show this test file: $ch/tests/optional/JdkCheck.java
# and run the checker to show what error messages get output without any JDK annotations:
cd $ch/tests/optional && $ch/bin/javac -processor optional JdkCheck.java
# There are 5 errors, two of which (including #3) are not expected.

# Add just 3 @Present annotations to
# $ch/src/main/java/org/checkerframework/checker/optional/jdk.astub
of  return type
get  receiver
orElseThrow  receiver

# Recompile:
gradle -p $cf assemble

# Test it:
cd $ch/tests/optional && $ch/bin/javac -processor optional JdkCheck.java

----------------

TYPE RULES: Nothing to do, was in annotated JDK.

----------------

TYPE INTRODUCTION RULES: Nothing to do, was in annotated JDK.

----------------

FLOW-SENSITIVITY

# Test:
cd $ch/tests/optional && javacheck -processor optional FlowSensitivity.java

## OK: cd $ch/tests/optional && $ch/bin/javac -processor org.checkerframework.checker.optional.OptionalChecker FlowSensitivity.java
## FAILS: cd $ch/tests/optional && $ch/bin-devel/javac -processor org.checkerframework.checker.optional.OptionalChecker FlowSensitivity.java

## PROBLEM:
# cd $ch/tests/optional && javacheck -processor org.checkerframework.checker.optional.OptionalChecker FlowSensitivity.java
# error: Unexpected NoSuchMethodError when invoking BaseAnnotatedTypeFactory for checker OptionalChecker
#   Exception: java.lang.NoSuchMethodError: com.github.javaparser.ast.body.CallableDeclaration.isMethodDeclaration()Z; Stack trace: org.checkerframework.framework.stub.StubParser.processCallableDeclaration(StubParser.java:653)
#   org.checkerframework.framework.stub.StubParser.processTypeDecl(StubParser.java:495)
#   org.checkerframework.framework.stub.StubParser.processCompilationUnit(StubParser.java:439)
#   org.checkerframework.framework.stub.StubParser.processStubUnit(StubParser.java:410)
#   org.checkerframework.framework.stub.StubParser.process(StubParser.java:404)
#   org.checkerframework.framework.stub.StubParser.parse(StubParser.java:363)
#   org.checkerframework.framework.type.AnnotatedTypeFactory.parseStubFiles(AnnotatedTypeFactory.java:2938)
#   org.checkerframework.framework.type.GenericAnnotatedTypeFactory.postInit(GenericAnnotatedTypeFactory.java:246)
#   org.checkerframework.common.basetype.BaseAnnotatedTypeFactory.<init>(BaseAnnotatedTypeFactory.java:24)
#   org.checkerframework.common.basetype.BaseAnnotatedTypeFactory.<init>(BaseAnnotatedTypeFactory.java:29)
#   org.checkerframework.common.basetype.BaseTypeVisitor.createTypeFactory(BaseTypeVisitor.java:241)
#   org.checkerframework.common.basetype.BaseTypeVisitor.<init>(BaseTypeVisitor.java:184)
#   org.checkerframework.common.basetype.BaseTypeChecker.createSourceVisitor(BaseTypeChecker.java:208)
#   org.checkerframework.common.basetype.BaseTypeChecker.createSourceVisitor(BaseTypeChecker.java:81)
#   org.checkerframework.framework.source.SourceChecker.initChecker(SourceChecker.java:879)
#   org.checkerframework.common.basetype.BaseTypeChecker.initChecker(BaseTypeChecker.java:96)
#   org.checkerframework.framework.source.SourceChecker.typeProcessingStart(SourceChecker.java:836)
#   org.checkerframework.javacutil.AbstractTypeProcessor$AttributionTaskListener.finished(AbstractTypeProcessor.java:157)
#   com.sun.tools.javac.api.ClientCodeWrapper$WrappedTaskListener.finished(ClientCodeWrapper.java:681)
#   com.sun.tools.javac.api.MultiTaskListener.finished(MultiTaskListener.java:111)
#   com.sun.tools.javac.main.JavaCompiler.flow(JavaCompiler.java:1342)
#   com.sun.tools.javac.main.JavaCompiler.flow(JavaCompiler.java:1296)
#   com.sun.tools.javac.main.JavaCompiler.compile2(JavaCompiler.java:901)
#   com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:860)
#   com.sun.tools.javac.main.Main.compile(Main.java:523)
#   com.sun.tools.javac.main.Main.compile(Main.java:381)
#   com.sun.tools.javac.main.Main.compile(Main.java:370)
#   com.sun.tools.javac.main.Main.compile(Main.java:361)
#   com.sun.tools.javac.Main.compile(Main.java:56)
#   com.sun.tools.javac.Main.main(Main.java:42)
# 1 error

Uncomment @EnsuresQualifierIf library annotation for isPresent

ant -e -find build.xml build
# Test it:
cd $ch/tests/optional && javacheck -processor org.checkerframework.checker.optional.OptionalChecker FlowSensitivity.java

----------------

Notice that we still haven't written any code!
The talk slot (45-60 minutes) is probably finished by now.

If there is more time, implement rule #7 about which occurrences of Optional are permitted.
Show the source code for the TypeValidator, in OptionalVisitor.java

----------------

To handle rule #1,
add Nullness annotations to Optional.java in the nullness JDK, not optional JDK.

public final @NonNull class Optional<T extends @NonNull Object> {
    private final @Nullable T value;
    public static <T extends @NonNull Object> Optional<T> ofNullable(@Nullable T value) {
    public @PolyNull T orElse(@PolyNull T other) {

----------------

The Optional Checker checks all the rules; this demo has only shown how to
handle some of the rules.

===========================================================================
