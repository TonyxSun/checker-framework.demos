Speaking experience:
Michael Ernst has given dozens of talks to tens of thousands of developers. His well-received presentations have made him a two-time JavaOne Rock Star. This is a new talk.

===========================================================================

Create your own type system in 45 minutes

THEORY
Short Form
Advanced

Excerpt

Don't let programming language designers have all the fun: you can design your own type system that is better than the current one.

Description

Many developers view type theory as abstruse and confusing. It's not! This talk will show you the four simple components of a type system: the types, their subtyping relationships, how to give a type to each expression in your program, and what operations are illegal. If you specify these four things, you have designed a type system.

We will do exactly that during the course of the presentation. Starting from nothing, in 45 minutes we will create a full-fledged type-checker that detects real errors in real programs. For concreteness, we will implement our type-checker for the Java language, and it will handle all Java constructs, such as generics, subtyping, and lambdas. Our type system will be better than the built-in Java type system: it will detect errors that the Java compiler permits and that would go undetected until run time.

Although our example will use Java, the ideas translate to other languages. Even if you don't want to implement your own type system, you will come away with a better understanding of type systems and of compile-time verification in general.

===========================================================================

Nothing is better than the Optional type

PRACTICE
Short Form
Intermediate

Excerpt

Optional should be prohibited: it is an overreaction to a problem that already has an elegant solution.

Description

Many programming languages have a typed named Optional, which is a container that is either empty or contains a non-null value. The Web and blogosphere are full of claims that the Optional class solves the problem of null pointer exceptions. This is not true. In this talk, you will learn that Optional has numerous problems without countervailing benefits. Optional does not make your code more correct or robust. However, Optional does have these effects:

 * It transforms a NullPointerException into a NoSuchElementException, which still crashes your program.
 * It creates new problems that were not a danger before.
 * It clutters your code.
 * It adds both space and time overheads.

Because of Optional's problems, many commentators advise programmers to use Optional only in very limited situations, such as only as return types. This denies the programmer the alleged benefits of Optional everywhere else in the program.

The Optional type isn't all bad: it does enables code reduction when dealing with possibly-present data, but this can be achieved in other ways. We will also discuss other arguments in favor of Optional.

There is a real problem that Optional tries to solve: accidentally forgetting to check all the possibilities when processing data. This talk shows a better way to avoid such problems, without the overheads and new problems of Optional.

===========================================================================

The end of array bounds errors

PRACTICE
Short Form
Beginner

Excerpt

You never need to suffer an array indexing error again.  With tools that allow you to express and verify specifications (contracts) about arrays, you get a compile-time guarantee that all your array indices are within bounds.

Description

A classic error that plagues programmers is an index-out-of-bounds error when trying to access an element in an array, list, or string. Typically, this causes a crash or a security vulnerability.

Up until now, the most effective way to prevent array bounds errors has been testing, coupled with extra run-time checking to detect bounds violations. This improves the robustness of your code, but there is still the possibility that your program will fail in the field.

We have built a program verification tool that guarantees that your program will never suffer an array bound exception. This tool differs from previous work in several ways. It runs at compile time, so there is no run-time overhead and is not dependent on your test suite. It is sound rather than heuristic: it gives a guarantee, in the form of a proof of correctness. It is scalable, able to quickly analyze part of your program at a time rather than doing an expensive analysis requiring the whole program. The tool is based on a theoretical foundation called dependent types.

The tool is open-source and works for the Java programming language. Although very new (it has not yet reached version 1.0), it has already detected dozens of indexing bugs in real-world programs.

We will demonstrate the tool and will explain how it works. You will leave the session with a better understanding of how to prevent bounds errors, which you can put into practice right away.

===========================================================================
