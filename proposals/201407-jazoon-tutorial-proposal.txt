"WORKSHOP" proposal

Contact the program chair with this proposal.

> Title of the presentation (max. 50 characters including spaces)

Preventing run-time errors at compile time

> Name(s) and affiliation(s) of the presenter(s)

Michael D. Ernst
University of Washington

> Abstract (max. 750 characters including spaces)
> 
> Description of the general topic/problem, why visitors should attend the presentation, including highlights of the technologies/concepts the presentation will cover. Please make the main arguments of your proposed presentation clear and explain why your topic is important.

Are you tired of null pointer exceptions, unintended side effects, SQL injections, concurrency errors, mistaken equality tests, and other run-time errors? Or, are your users tired of them in your code? We will show you how to guarantee, at compile time, that these run-time exceptions cannot occur. You have nothing to lose but your bugs!

You will leave the session ready to improve your code by running the compiler instead of poring over the debugger.

This capability is possible because of Java 8's type annotations and pluggable type-checking. Dozens of pluggable type-checkers already exist for your use, or you can create your own in 2 minutes. These tools are in in daily use around the world, including at Google.

> Keywords

pluggable type system, security, run-time errors, compiler


> Prerequisites for your audience: e.g. knowledge/experience in project management, etc.
> 
> Short biography of presenter(s)

Michael Ernst loves programmers and wants to make their lives better.  He builds programming tools and was the specification lead for JSR-308, which extended Java's annotation syntax.

As a professor at the University of Washington, his research aims to make software more reliable, more secure, and easier (and more fun!) to produce.  Ernst's research combines strong theoretical foundations with realistic experimentation, with an eye to changing the way that software developers work.
He publishes in software engineering, programming languages, type theory, security, program analysis, bug prediction, testing, and verification. 

Dr. Ernst was previously a developer at Microsoft, a researcher at Microsoft Research, and a tenured professor at MIT.

> Link to an online video of the main speaker presenting the abstract of the talk in English. This helps us rate the presenter’s speaking skills. The video will be publicly available for community rating and in the online conference program
> 
> Photo(s) of the main presenter(s) for publication in the program,
>  at least 800×600 pixels, 300dpi, 4×3 (HxW) aspect ratio

mernst-headshot-200307-2-cropped-4x3.jpg
[currently in homedir, move it]

> Contact information of the main presenter (postal address, email address, phone and fax numbers)

Michael Ernst
UW Computer Science & Engineering
Box 352350, 185 Stevens Way
Seattle, WA  98195-2350
USA

mernst@cs.washington.edu

phone: +1-206-221-0965
fax: +1-206-616-3804

===========================================================================

A little-known and under-appreciated Java 8 feature is type annotations, an innovative feature found in no other mainstream language.  Type annotations ease the documentation task by allowing a programmer to write short, precise annotations instead of natural-language Javadoc explanations.  More importantly, they enable a tool to verify that the documentation is correct and up to date, and that the code is free of certain bugs.

This interactive workshop will explain how and why to use Java 8's type annotations.  After a brief introduction, the audience will dive into using them.  We will start with tutorials, and then the audience will apply them to their own code.

This is a refined version of a tutorial that we have given at Java conferences and user groups.  It uses a toolset, the Checker Framework (http://checker-framework.org/), that is used daily at Google and by other advanced developers.
