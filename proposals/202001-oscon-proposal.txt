https://conferences.oreilly.com/oscon/oscon-or/public/cfp
https://conferences.oreilly.com/oscon/oscon-or/user/proposal/propose/cfp/781

===========================================================================

> Proposed title

Preventing errors at compile time:  program verification for the masses

> Description

Are you tired of null pointer exceptions, SQL injections, concurrency errors, mistaken equality tests, data leaks, and other run-time errors?  Are your users tired of them in your code?  In this tutorial, you will learn how to guarantee, at compile time, that these run-time exceptions cannot occur.  You have nothing to lose but your bugs!

> Topic

Software methodologies

> Session type

40-minute session

> Abstract

Formal verification is attractive because it provides a guarantee of correct behavior.  No amount of testing can provide such a guarantee.  Unfortunately, most formal verification tools are difficult to use, do not scale to large programs, and/or do not work on popular programming languages.

Type-checking is the shining success of formal verification.  Types are used and understood by programmers.  Therefore, creating custom type systems ("pluggable-type-checking") is an effective way to achieve formal verification on a large scale.  This approach and our open-source tool, called the Checker Framework, is in daily use at companies such as Amazon, Google, and Uber, among many others.

This session will review the (simple!) theory that enables type-checking to provide a formal guarantee.  Then, it will teach you how to use pluggable type-systems to prevent multiple types of run-time errors.

Although this talk is presented in the context of Java, the concepts apply beyond the Java language.  Our work has influenced the design of Java and other languages such as Kotlin.

> Type: 40-minute session

> Who is this presentation for?

Architects; software developers; QA and compliance teams

> Audience level

Intermediate

> What's the takeaway for the audience?

The main takeaway is a new perspective on formal verification.  Verification is a complement to testing.  Lightweight verification based on type systems can be scalable, precise, effective, and fit into developer workflows.  The specifications can be both more concise and more precise than English documentation, and are guaranteed to be accurate.

Another takeaway is an appreciation for type systems.  The limitations of built-in type systems have turned off many programmers to types, but they can be much more expressive and powerful without added complexity.

A final takeaway is exposure to an industrial-strength, open-source tool that programmers can use to improve their code.

> Prerequisite knowledge and/or requirements needed by attendees
Knowledge of some statically-typed object-oriented programming language, such as C++, Java, Kotlin, Rust, Scala, or Swift.

===========================================================================

Biography and headshot:

> Speaker(s): biography and hi-res headshot (minimum 1400 pixels wide; required)

Michael Ernst is an open-source developer who was the specification lead for Java's type annotations feature.  He has won multiple Rock Star awards at the JavaOne conference for his engaging presentations.  As his day job, he splits his time between being a Professor of Computer Science & Engineering at the University of Washington and doing software verification at Amazon Web Services.

In all three roles, he designs and builds tools to make software more reliable, more secure, and easier (and more fun!) to produce.  Ernst's research combines strong theoretical foundations with realistic experimentation and tool-building, with an eye to changing the way that software developers work.  Sample topics include software engineering, programming languages, type theory, security, program analysis, bug prediction, testing, and verification.

More information is available at his homepage: "http://homes.cs.washington.edu/~mernst/":http://homes.cs.washington.edu/~mernst/

> Headshot
~/public_html/images/mernst-headshot-200307-2.jpg

> A video of the speaker
https://www.youtube.com/watch?v=6E1CSydgzQc&t=245s https://www.youtube.com/watch?v=-1jjJf5C-Fc https://www.youtube.com/watch?v=uS-QAv400ps
